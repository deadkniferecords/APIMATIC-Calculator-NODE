/**
 * APIMATICCalculatorLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io )
 */

var _request = require('../Http/Client/RequestClient');
var _configuration = require('../configuration');
var _servers = require('../Servers');
var _APIHelper = require('../APIHelper');
var _BaseController = require('./BaseController');
var logger = require('winston');

var SimpleCalculatorController = {

    /**
     * Calculates the expression using the specified operation.
     * All parameters to the endpoint are supplied through the object with their names
     * being the key and their desired values being the value. A list of parameters that can be used are:
     * 
     *     {OperationTypeEnum} operation    Required parameter: The operator to apply on the variables
     *     {double} x    Required parameter: The LHS value
     *     {double} y    Required parameter: The RHS value
     * 
     * @param {object} input    RequiredParameter: object containing any of the parameters to this API Endpoint.
     * @param {function} callback    Required parameter: Callback function in the form of function(error, response)
     *
     * @return {double}
     */
    getCalculate: function (input, callback) {
        logger.info("getCalculate being called");
        logger.info("Assigning default values to optional parameters");
        //Assign default values
        input = input || {};

        //Validating required parameters
        logger.info("Validating required parameters for getCalculate");
        if (input.operation === null || input.operation === undefined){
            return callback({errorMessage: "The property 'operation' in the input object cannot be null.", errorCode: -1}, null, null);
        } else if (input.x === null || input.x === undefined){
            return callback({errorMessage: "The property 'x' in the input object cannot be null.", errorCode: -1}, null, null);
        } else if (input.y === null || input.y === undefined){
            return callback({errorMessage: "The property 'y' in the input object cannot be null.", errorCode: -1}, null, null);
        }

        //prepare query string for API call;
        logger.info("Preparing Query URL for getCalculate");
        var _baseUri = _configuration.getBaseUri();
        
        var _queryBuilder = _baseUri + "/{operation}";
        
        //Process template parameters
        _queryBuilder = _APIHelper.appendUrlWithTemplateParameters(_queryBuilder, {
            "operation": (input.operation != null) ? input.operation : null
        });

        //Process query parameters
        _queryBuilder = _APIHelper.appendUrlWithQueryParameters(_queryBuilder, {
            "x": input.x,
            "y": input.y
        });

        //validate and preprocess url
        var _queryUrl = _APIHelper.cleanUrl(_queryBuilder);
        
        //prepare headers
        logger.info("Preparing headers for getCalculate");
        var _headers = {
            "Authorization": "Bearer " + _configuration.oAuthAccessToken
        };

        //Construct the request
        var _options = {
            queryUrl: _queryUrl,
            method: "GET",
            headers: _headers,
        };
        logger.debug("Raw request for getCalculate  > "+ JSON.stringify(_options));
        
        //Build the response processing. 
        function cb (_error, _response, _context) {
            var errorResponse;
            if (_error) {
                logger.error(_error);
                errorResponse = _BaseController.validateResponse(_context, "getCalculate");
                callback(errorResponse.error, errorResponse.response, errorResponse.context);
            } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                var _strResult = _response.body;
                logger.info("Unboxing response for getCalculate");
                var _result = JSON.parse(_strResult);
                callback(null, _result, _context);
            } else {
                logger.info("Validating response for getCalculate ");
                errorResponse = _BaseController.validateResponse(_context, "getCalculate");
                callback(errorResponse.error, errorResponse.response, errorResponse.context);
            }
        }
        
        logger.info("Sending request for getCalculate...");
        _request(_options, cb);
    }

};

module.exports = SimpleCalculatorController;
